"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkDreamText = exports.sendDream = exports.changeDreamPage = exports.getCurrentDream = exports.getAllDreams = exports.start = void 0;
const api_js_1 = require("../api.js");
const createDreamsList_js_1 = __importDefault(require("./createDreamsList.js"));
const checkDreamText_js_1 = __importDefault(require("./checkDreamText.js"));
exports.checkDreamText = checkDreamText_js_1.default;
function start(ctx) {
    ctx.session.isUserStartedBot = true;
    ctx.reply(`–ü—Ä–∏–≤—ñ—Ç, ${ctx.update.message.from.first_name}! –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –°–Ω–æ–≤–∏–¥–µ—Ü—å ‚ú®\n\n` +
        '–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º —Å–Ω–æ–º. –ù–∞—Ç–æ–º—ñ—Å—Ç—å, —Ç–∏ –ø–æ–±–∞—á–∏—à —Å–æ–Ω —ñ–Ω—à–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞!\n\n' +
        '–ù–∞—à–µ –∑ —Ç–æ–±–æ—é —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–Ω–æ–Ω—ñ–º–Ω–µ, –º–∏ –Ω–µ —Ä–æ–∑–≥–æ–ª–æ—à—É—î–º–æ –∞–≤—Ç–æ—Ä—ñ–≤ —Å–Ω–æ–≤–∏–¥—ñ–Ω—å!\n\n' +
        '–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π —Å–æ–Ω —É –ø–æ–ª—ñ –¥–ª—è –≤–≤–µ–¥–µ–Ω—è —Ç–µ–∫—Å—Ç—É ‚¨áÔ∏è');
}
exports.start = start;
async function getAllDreams(ctx) {
    const userId = ctx.update.message.from.id;
    const allDreams = await (0, api_js_1.getUserDreams)(userId);
    if (!Array.isArray(allDreams)) {
        return;
    }
    ctx.session.allUserDreams = allDreams;
    ctx.reply('–©–æ–¥–µ–Ω–Ω–∏–∫ —Ç–≤–æ—ó—Ö —Å–Ω—ñ–≤:', (0, createDreamsList_js_1.default)(ctx.session));
}
exports.getAllDreams = getAllDreams;
async function getCurrentDream(ctx) {
    const dreamId = Number(ctx.match[0].match(/[0-9]+/));
    if (!ctx.session.allUserDreams) {
        const userId = ctx.callbackQuery.from.id;
        const allDreams = await (0, api_js_1.getUserDreams)(userId);
        if (!Array.isArray(allDreams)) {
            return;
        }
        ctx.session.allUserDreams = allDreams;
    }
    const currentDream = ctx.session.allUserDreams.find(dream => dream.dreamId === dreamId);
    if (currentDream)
        ctx.reply(currentDream);
}
exports.getCurrentDream = getCurrentDream;
function changeDreamPage(ctx) {
    const action = ctx.match[0];
    const dreamPage = ctx.session.currentDreamPage;
    switch (action) {
        case 'dreamListMinus':
            if (dreamPage > 1) {
                ctx.session.currentDreamPage = ctx.session.currentDreamPage - 1;
                ctx.editMessageText('–©–æ–¥–µ–Ω–Ω–∏–∫ —Ç–≤–æ—ó—Ö —Å–Ω—ñ–≤:', (0, createDreamsList_js_1.default)(ctx.session));
            }
            break;
        case 'dreamListPlus':
            const { allUserDreams: dreams, step } = ctx.session;
            let allPageCount;
            if (dreams && step)
                allPageCount = Math.ceil(dreams.length / step);
            if (allPageCount && dreamPage < allPageCount) {
                ctx.session.currentDreamPage = ctx.session.currentDreamPage + 1;
                ctx.editMessageText('–©–æ–¥–µ–Ω–Ω–∏–∫ —Ç–≤–æ—ó—Ö —Å–Ω—ñ–≤:', (0, createDreamsList_js_1.default)(ctx.session));
            }
            break;
        default:
            console.error('Error');
            break;
    }
}
exports.changeDreamPage = changeDreamPage;
async function sendDream(ctx) {
    const currentUserId = ctx.callbackQuery.from.id;
    let user;
    do {
        user = await (0, api_js_1.getUser)();
    } while (currentUserId === user.userId);
    const randomDream = await (0, api_js_1.getDream)(user.userId);
    await (0, api_js_1.setDream)(ctx);
    ctx.editMessageText('–î—è–∫—É—é, —Ç–∏ —Å—É–ø–µ—Ä! üòá\n\n' +
        '–¢—Ä–∏–º–∞–π —Å–æ–Ω –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n' +
        `<i>‚Äú${randomDream.text}‚Äù</i>\n\n` +
        '–Ø–∫—â–æ —Ö–æ—á–µ—à –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—Ç —â–µ –æ–¥–Ω–∏–º —Å–Ω–æ–º, –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –π–æ–≥–æ –Ω–∏–∂—á–µ ‚¨áÔ∏è', { parse_mode: 'HTML' });
}
exports.sendDream = sendDream;
