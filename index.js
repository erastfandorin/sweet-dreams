import { config } from 'dotenv';
import express from 'express';
import { Telegraf, Markup, session } from 'telegraf';

import { getUser, getDream, getUserDreams, setDream } from './api.js';

config();

function sendEditKeyboard(dreamText) {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('–¢–∞–∫, –ø—É–±–ª—ñ–∫—É–π—Ç–µ! ü•≥', 'sendDream'),
      Markup.button.switchToCurrentChat('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚úçÔ∏è', `${dreamText}`),
    ],
  ]);
}

function createDreamsList(ctx) {
  const dreams = ctx.session.allUserDreams;
  const step = ctx.session.step;
  const dreamPage = ctx.session.currentDreamPage;

  const currentDream = [];

  const currentDreamMax = dreamPage * step;
  const currentDreamMin = currentDreamMax - step;

  dreams.forEach((dream, index) => {
    if (
      currentDream.length < step &&
      index >= currentDreamMin &&
      index <= currentDreamMax
    ) {
      currentDream.push([
        Markup.button.callback(`${dream.text}`, `dreamId${dream.dreamId}`),
      ]);
    }
  });

  const allPageCount = Math.ceil(dreams.length / step);
  const navigationKeyboard = [
    Markup.button.callback(`‚¨ÖÔ∏è`, `dreamListMinus`),
    Markup.button.callback(`${dreamPage}/${allPageCount}`, `plug`),
    Markup.button.callback(`‚û°Ô∏è`, `dreamListPlus`),
  ];

  const keyboard = [...currentDream, navigationKeyboard];

  return Markup.inlineKeyboard(keyboard);
}

const app = express();
const bot = new Telegraf(process.env.TELEGRAM_API_TOKEN);
const PORT = 3000;

bot.use(session());

// get list with all dreams
bot.command('alldream', async ctx => {
  ctx.session = {};
  ctx.session.currentDreamPage = 1;
  ctx.session.step = 6;

  const userId = ctx.update.message.from.id;
  const allDreams = await getUserDreams(userId);
  ctx.session.allUserDreams = allDreams;

  ctx.reply('–©–æ–¥–µ–Ω–Ω–∏–∫ —Ç–≤–æ—ó—Ö —Å–Ω—ñ–≤:', createDreamsList(ctx));
});

// get current dream
bot.action(/dreamId.*/, ctx => {
  const dreamId = ctx.update.callback_query.data.match(/[0-9]+/)[0];
  const currentDream = ctx.session.allUserDreams.find(
    dream => dream.dreamId === Number(dreamId),
  );
  ctx.reply(currentDream);
});

// change dream page
bot.action(['dreamListMinus', 'dreamListPlus'], ctx => {
  const action = ctx.update.callback_query.data;

  const dreamPage = ctx.session.currentDreamPage;
  switch (action) {
    case 'dreamListMinus':
      if (dreamPage > 1) {
        ctx.session.currentDreamPage = ctx.session.currentDreamPage - 1;
        ctx.editMessageText('–©–æ–¥–µ–Ω–Ω–∏–∫ —Ç–≤–æ—ó—Ö —Å–Ω—ñ–≤:', createDreamsList(ctx));
      }
      break;

    case 'dreamListPlus':
      const dreams = ctx.session.allUserDreams;
      const step = ctx.session.step;
      const allPageCount = Math.ceil(dreams.length / step);

      if (dreamPage < allPageCount) {
        ctx.session.currentDreamPage = ctx.session.currentDreamPage + 1;
        ctx.editMessageText('–©–æ–¥–µ–Ω–Ω–∏–∫ —Ç–≤–æ—ó—Ö —Å–Ω—ñ–≤:', createDreamsList(ctx));
      }
      break;

    default:
      console.error('Error');
      break;
  }
});

bot.start(ctx => {
  ctx.session = {};

  ctx.session.isStartActive = true;
  ctx.reply(
    `–ü—Ä–∏–≤—ñ—Ç, ${ctx.update.message.from.first_name}! –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –í–µ—á—ñ—Ä–Ω—ñ–π –ü–æ–≤—ñ—Å—Ç—è—Ä ‚ú®\n\n` +
      '–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º —Å–Ω–æ–º. –ù–∞—Ç–æ–º—ñ—Å—Ç—å, —Ç–∏ –ø–æ–±–∞—á–∏—à —Å–æ–Ω —ñ–Ω—à–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞!\n\n' +
      '–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π —Å–æ–Ω —É –ø–æ–ª—ñ –¥–ª—è –≤–≤–µ–¥–µ–Ω—è —Ç–µ–∫—Å—Ç—É ‚¨áÔ∏è',
  );
});

bot.on('text', ctx => {
  if (ctx.session?.isStartActive) {
    const messageText = ctx.message.text.replace(/@sweet_dreams_tgbot /g, ''); ///// @sweet_dreams_tgbot - telegram bot name
    ctx.session.messageText = messageText;

    if (messageText.length <= 100) {
      ctx.replyWithHTML(
        '–¢–≤—ñ–π —Å–æ–Ω –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª—ñ–≤(\n\n –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑',
      );
    } else {
      ctx.replyWithHTML(
        '–¢–∏ —Ö–æ—á–µ—à –∞–Ω–æ–Ω—ñ–º–Ω–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Å–Ω–æ–º:\n\n' +
          `<i>‚Äú${messageText}‚Äù</i>\n\n` +
          '–ß–∏ –≤—Å–µ –≤—ñ—Ä–Ω–æ?',
        sendEditKeyboard(messageText),
      );
    }
  } else {
    ctx.reply('–ù–∞–∂–º—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏');
  }
});

bot.action('sendDream', async ctx => {
  const user = await getUser();
  const randomDream = await getDream(user.userId);

  // console.log('2', ctx.update.callback_query.from.id); //username
  await setDream(ctx);

  ctx.editMessageText(
    '–î—è–∫—É—é, —Ç–∏ —Å—É–ø–µ—Ä! üòá\n\n' +
      '–¢—Ä–∏–º–∞–π —Å–æ–Ω –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n' +
      `<i>‚Äú${randomDream.text}‚Äù</i>`,
    { parse_mode: 'HTML' },
  );
});

bot.launch();
app.listen(PORT, () => console.log(`My server is running on port ${PORT}`));
