import { config } from 'dotenv';
import { initializeApp } from 'firebase/app';
import { getDatabase } from 'firebase/database';
// import { getAnalytics } from "firebase/analytics";
import { ref, set, onValue } from 'firebase/database';

const firebaseConfig = {
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  databaseURL: process.env.FIREBASE_DATABASE_URL,
  projectId: process.env.FIREBASE_PROJECT_ID,
  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.FIREBASE_APP_ID,
  measurementId: process.env.FIREBASE_MEASUREMENT_ID,
};

// const app = initializeApp(firebaseConfig);
// const analytics = getAnalytics(app);
// export const db = getDatabase(app);

config();

import express from 'express';
import { Telegraf, Markup, session } from 'telegraf';

// Markup.keyboard([["–†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —Å–æ–Ω –∞–Ω–æ–Ω—ñ–º–Ω–æ", "–†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —Å–æ–Ω –≤—ñ–¥–∫—Ä–∏—Ç–æ"]]).resize();

function yesNoKeyboard() {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('–¢–∞–∫, –ø—É–±–ª—ñ–∫—É–π—Ç–µ! ü•≥', 'yes'),
      Markup.button.callback('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚úçÔ∏è', 'no'),
    ],
  ]);
}

const app = express();
const bot = new Telegraf(process.env.TELEGRAM_API_TOKEN);
const PORT = 3000;

bot.use(session());

bot.start(ctx => {
  ctx.session = { isStartActive: true };
  ctx.replyWithHTML(
    `–ü—Ä–∏–≤—ñ—Ç, ${ctx.update.message.from.first_name}! –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –í–µ—á—ñ—Ä–Ω—ñ–π –ü–æ–≤—ñ—Å—Ç—è—Ä ‚ú®\n\n` +
      '–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º —Å–Ω–æ–º. –ù–∞—Ç–æ–º—ñ—Å—Ç—å, —Ç–∏ –ø–æ–±–∞—á–∏—à —Å–æ–Ω —ñ–Ω—à–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞!\n\n' +
      '–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π —Å–æ–Ω —É –ø–æ–ª—ñ –¥–ª—è –≤–≤–µ–¥–µ–Ω—è —Ç–µ–∫—Å—Ç—É ‚¨áÔ∏è',
  );
});

bot.on('text', ctx => {
  if (ctx.session?.isStartActive) {
    ctx.replyWithHTML(
      '–¢–∏ —Ö–æ—á–µ—à –∞–Ω–æ–Ω—ñ–º–Ω–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Å–Ω–æ–º:\n\n' +
        `<i>‚Äú${ctx.message.text}‚Äù</i>\n\n` +
        '–ß–∏ –≤—Å–µ –≤—ñ—Ä–Ω–æ?',
      yesNoKeyboard(),
    );
  } else {
    ctx.reply('–ù–∞–∂–º—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏');
  }
});

bot.action(['yes', 'no'], ctx => {
  if (ctx.callbackQuery.data === 'yes') {
    ctx.editMessageText(
      '–î—è–∫—É—é, —Ç–∏ —Å—É–ø–µ—Ä! üòá' +
        '–¢—Ä–∏–º–∞–π —Å–æ–Ω –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\‚Ä®–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥ –Ω—ñ–∫–æ–º ‚Äú–∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∏–π_–Ω—ñ–∫‚Äù :' +
        '‚Äú–Ø –ø—Ä–æ–¥–∞–≤–∞–≤ –Æ–ø—ñ—Ç–µ—Ä —Å–≤–æ—î–º—É —Ç–∞—Ä–≥–∞–Ω—É, –∞ –≤—ñ–Ω –ø–æ–¥–∞—Ä—É–≤–∞–≤ –º–µ–Ω—ñ –±—É–∑–æ–∫, —è–∫–∏–π —Å—Ç–∞–≤ –º–∞—Ç–µ—Ä—ñ–∞–ª–æ–º –¥–ª—è –ª–æ–¥–∫–∏. –¢–∞–∫ –π —Å—Ç–≤–æ—Ä–∏–≤—Å—è –≤–µ—Å—å —Å–≤—ñ—Ç, –Ω—É –∞ —è –ø—Ä–æ—Å—Ç–æ –∫—É–Ω–∂—É—Ç!‚Äù',
    );
  } else {
    // ctx.deleteMessage();
  }
});

// bot.hears(/^—É–¥–∞–ª–∏—Ç—å\s(\d+)$/, (ctx) => {

// bot.hears("–°–º–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è", (ctx) => {
//   ctx.replyWithPhoto(
//     "https://img2.goodfon.ru/wallpaper/nbig/7/ec/justdoit-dzhastduit-motivaciya.jpg",
//     {
//       caption: "–ù–µ –≤–∑–¥—É–º–∞–π —Å–¥–∞–≤–∞—Ç—å—Å—è!",
//     }
//   );
// });

bot.launch();
app.listen(PORT, () => console.log(`My server is running on port ${PORT}`));

//   const getDreams = async (setAllDreams) => {
//     const starCountRef = ref(db, "dreams/");
//     onValue(starCountRef, (snapshot) => {
//       const data = snapshot.val();
//       setAllDreams(data);
//     });
//   };

//   const getUniqueId = (allDreams) => {
//     let dreamsIDs = [];
//     for (let dream in allDreams) {
//       dreamsIDs.push(dream);
//     }
//     return createUniqueID(dreamsIDs);
//   };

//   const submitForm = (dream) => {
//     const newID = getUniqueId(allDreams);
//     setNewDream(newID, dream);
//   };

//   /// api request
//   const setNewDream = (userId, dream) => {
//     set(ref(db, "dreams/" + userId), {
//       userId: userId,
//       text: dream,
//     });
//   };
