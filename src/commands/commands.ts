import { DreamBotContext } from '../types/types.js';
import { Update } from 'telegraf/types';
import { getUser, getDream, setDream, getUserDreams } from '../api.js';
import createDreamsList from './createDreamsList.js';
import checkDreamText from './checkDreamText.js';

export function start(ctx: DreamBotContext<Update.MessageUpdate>) {
  ctx.session.isUserStartedBot = true;

  ctx.reply(
    `–ü—Ä–∏–≤—ñ—Ç, ${ctx.update.message.from.first_name}! –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –°–Ω–æ–≤–∏–¥–µ—Ü—å ‚ú®\n\n` +
      '–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º —Å–Ω–æ–º. –ù–∞—Ç–æ–º—ñ—Å—Ç—å, —Ç–∏ –ø–æ–±–∞—á–∏—à —Å–æ–Ω —ñ–Ω—à–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞!\n\n' +
      '–ù–∞—à–µ –∑ —Ç–æ–±–æ—é —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–Ω–æ–Ω—ñ–º–Ω–µ, –º–∏ –Ω–µ —Ä–æ–∑–≥–æ–ª–æ—à—É—î–º–æ –∞–≤—Ç–æ—Ä—ñ–≤ —Å–Ω–æ–≤–∏–¥—ñ–Ω—å!\n\n' +
      '–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π —Å–æ–Ω —É –ø–æ–ª—ñ –¥–ª—è –≤–≤–µ–¥–µ–Ω—è —Ç–µ–∫—Å—Ç—É ‚¨áÔ∏è',
  );
}

export async function getAllDreams(ctx: DreamBotContext<Update.MessageUpdate>) {
  const userId = ctx.update.message.from.id;
  const allDreams = await getUserDreams(userId);

  if (!Array.isArray(allDreams)) {
    return;
  }
  ctx.session.allUserDreams = allDreams;

  ctx.reply('–©–æ–¥–µ–Ω–Ω–∏–∫ —Ç–≤–æ—ó—Ö —Å–Ω—ñ–≤:', createDreamsList(ctx.session));
}

export async function getCurrentDream(ctx: DreamBotContext<Update.CallbackQueryUpdate>) {
  const dreamId = Number(ctx.match[0].match(/[0-9]+/));

  if (!ctx.session.allUserDreams) {
    const userId = ctx.callbackQuery.from.id;
    const allDreams = await getUserDreams(userId);

    if (!Array.isArray(allDreams)) {
      return;
    }
    ctx.session.allUserDreams = allDreams;
  }

  const currentDream = ctx.session.allUserDreams.find(dream => dream.dreamId === dreamId);
  if (currentDream) ctx.reply(currentDream);
}

export function changeDreamPage(ctx: DreamBotContext<Update.CallbackQueryUpdate>) {
  const action = ctx.match[0];

  const dreamPage = ctx.session.currentDreamPage;

  switch (action) {
    case 'dreamListMinus':
      if (dreamPage > 1) {
        ctx.session.currentDreamPage = ctx.session.currentDreamPage - 1;
        ctx.editMessageText('–©–æ–¥–µ–Ω–Ω–∏–∫ —Ç–≤–æ—ó—Ö —Å–Ω—ñ–≤:', createDreamsList(ctx.session));
      }
      break;
    case 'dreamListPlus':
      const { allUserDreams: dreams, step } = ctx.session;

      let allPageCount;
      if (dreams && step) allPageCount = Math.ceil(dreams.length / step);

      if (allPageCount && dreamPage < allPageCount) {
        ctx.session.currentDreamPage = ctx.session.currentDreamPage + 1;
        ctx.editMessageText('–©–æ–¥–µ–Ω–Ω–∏–∫ —Ç–≤–æ—ó—Ö —Å–Ω—ñ–≤:', createDreamsList(ctx.session));
      }
      break;
    default:
      console.error('Error');
      break;
  }
}

export async function sendDream(ctx: DreamBotContext<Update.CallbackQueryUpdate>) {
  const currentUserId = ctx.callbackQuery.from.id;
  let user;
  do {
    user = await getUser();
  } while (currentUserId === user.userId);

  const randomDream = await getDream(user.userId);

  await setDream(ctx);

  ctx.editMessageText(
    '–î—è–∫—É—é, —Ç–∏ —Å—É–ø–µ—Ä! üòá\n\n' +
      '–¢—Ä–∏–º–∞–π —Å–æ–Ω –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n' +
      `<i>‚Äú${randomDream.text}‚Äù</i>\n\n` +
      '–Ø–∫—â–æ —Ö–æ—á–µ—à –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—Ç —â–µ –æ–¥–Ω–∏–º —Å–Ω–æ–º, –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –π–æ–≥–æ –Ω–∏–∂—á–µ ‚¨áÔ∏è',

    { parse_mode: 'HTML' },
  );
}

export {
  checkDreamText,
}

